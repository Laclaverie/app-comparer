// apps/client/lib/services/app_initialization.dart

import 'package:flutter/foundation.dart';
import 'test_services.dart';
import '../database/app_database.dart';
import '../database/data_migration_service.dart';

class AppInitializationService {
  static bool _isInitialized = false;
  static AppDatabase? _database; // ‚úÖ CORRECTION : Statique
  
  /// Getter pour acc√©der √† la base depuis l'ext√©rieur
  static AppDatabase get database {
    if (_database == null) {
      throw StateError('Database not initialized. Call initialize() first.');
    }
    return _database!;
  }
  
  /// Initialiser l'application
  static Future<void> initialize() async {
    if (_isInitialized) return;
    
    debugPrint('üöÄ [INIT] Initialisation de l\'application...');
    
    try {
      // 1. Initialiser la base de donn√©es
      await _initializeDatabase();
      
      // 2. Lancer les tests en mode debug
      if (kDebugMode) {
        await TestService.runDatabaseTests();
        await TestService.printDatabaseStats();
      }
      
      // 3. Autres initialisations...
      await _initializeServices();
      
      _isInitialized = true;
      debugPrint('‚úÖ [INIT] Application initialis√©e avec succ√®s');
      
    } catch (e, stackTrace) {
      debugPrint('‚ùå [INIT] Erreur d\'initialisation: $e');
      if (kDebugMode) {
        print('Stack trace: $stackTrace');
      }
      rethrow;
    }
  }
  
  /// Initialiser la base de donn√©es
  static Future<void> _initializeDatabase() async {
    debugPrint('üíæ [INIT] Initialisation de la base de donn√©es...');
    
    try {
      // ‚úÖ NOUVEAU : V√©rifier si migration n√©cessaire AVANT d'ouvrir la nouvelle base
      await _migrateFromOldDatabaseIfNeeded();
      
      // ‚úÖ CORRECTION : Assigner √† la variable statique
      _database = AppDatabase();
      
      // Tester la nouvelle base
      final products = await _database!.getAllProducts();
      debugPrint('‚úÖ [INIT] Base de donn√©es op√©rationnelle - ${products.length} produit(s)');
      
    } catch (e) {
      debugPrint('‚ùå [INIT] Erreur d\'initialisation: $e');
      rethrow;
    }
  }
  
  /// Migrer depuis l'ancienne base si elle existe
  static Future<void> _migrateFromOldDatabaseIfNeeded() async {
    AppDatabase? oldDb;
    
    try {
      debugPrint('üîç [MIGRATION] V√©rification d\'une ancienne base...');
      
      // ‚úÖ CORRECTION : Utiliser le bon nom de m√©thode (sans underscore)
      oldDb = AppDatabase.createOldDb();
      
      // V√©rifier si elle contient des donn√©es
      final oldProducts = await oldDb.customSelect('SELECT COUNT(*) as count FROM products').getSingle();
      final oldCount = oldProducts.data['count'] as int;
      
      if (oldCount > 0) {
        debugPrint('üîÑ [MIGRATION] Ancienne base d√©tect√©e avec $oldCount produits');
        debugPrint('üîÑ [MIGRATION] Lancement de la migration vers base propre...');
        
        // ‚úÖ CORRECTION : Utiliser le bon nom de m√©thode (sans underscore)
        final newDb = AppDatabase.createNewDb();
        
        // Effectuer la migration
        final migrationService = DataMigrationService(oldDb, newDb);
        
        // Export des donn√©es
        final exportData = await migrationService.exportAllData();
        
        // Import dans la nouvelle base
        await migrationService.importAllData(exportData);
        
        // Fermer les bases temporaires
        await oldDb.close();
        await newDb.close();
        
        debugPrint('‚úÖ [MIGRATION] Migration termin√©e avec succ√®s');
        
      } else {
        debugPrint('‚ÑπÔ∏è [MIGRATION] Ancienne base vide, pas de migration n√©cessaire');
        await oldDb.close();
      }
      
    } catch (e) {
      debugPrint('‚ö†Ô∏è [MIGRATION] Pas d\'ancienne base √† migrer: $e');
      if (oldDb != null) {
        try {
          await oldDb.close();
        } catch (_) {}
      }
    }
  }
  
  /// Initialiser les autres services
  static Future<void> _initializeServices() async {
    debugPrint('‚öôÔ∏è [INIT] Initialisation des services...');
    
    // Ici vous pourriez initialiser :
    // - Services de notification
    // - Services de synchronisation
    // - Cache de l'application
    // - Services de g√©olocalisation
    // etc.
    
    debugPrint('‚úÖ [INIT] Services initialis√©s');
  }
  
  /// Nettoyage en fin d'application
  static Future<void> cleanup() async {
    if (!_isInitialized) return;
    
    debugPrint('üßπ [CLEANUP] Nettoyage de l\'application...');
    
    try {
      // Fermer la base de donn√©es
      if (_database != null) {
        await _database!.close();
        _database = null;
      }
      
      // Nettoyer les donn√©es de test en mode debug
      if (kDebugMode) {
        await TestService.cleanupTestData();
      }
      
      _isInitialized = false;
      debugPrint('‚úÖ [CLEANUP] Nettoyage termin√©');
      
    } catch (e) {
      debugPrint('‚ùå [CLEANUP] Erreur de nettoyage: $e');
    }
  }
}