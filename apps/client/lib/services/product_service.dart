import 'dart:io'; // ‚úÖ AJOUT pour File

import 'package:drift/drift.dart' show Value;
import 'package:flutter/foundation.dart' hide Category;
import 'package:flutter/material.dart';
import 'package:shared_models/models/product/productdto.dart';

import '../database/app_database.dart';
import '../database/mappers/product_mapper.dart';
import 'client_server_service.dart'; // ‚úÖ AJOUT

/// R√©sultat de la recherche de produit
enum ProductSearchResult {
  found,
  notFound,
  invalidBarcode,
}

/// R√©ponse de la recherche de produit
class ProductSearchResponse {
  final ProductSearchResult result;
  final ProductDto? productDto;
  final String? errorMessage;

  ProductSearchResponse({
    required this.result,
    this.productDto,
    this.errorMessage,
  });

  // ‚úÖ Getter pour compatibilit√© avec l'ancien code
  @Deprecated('This getter will be removed in future versions. Use productDto instead.')
  ProductDto? get product => productDto;
}

class ProductService {
  final AppDatabase _database;
  final ClientServerService _serverService = ClientServerService(); // ‚úÖ AJOUT

  ProductService(this._database);

  /// Rechercher un produit par code-barres
  Future<ProductSearchResponse> searchProductByBarcode(String barcode) async {
    try {
      debugPrint('üîç [SEARCH] Recherche produit barcode: $barcode');

      // ‚úÖ √âtape 1 : Recherche locale d'abord
      final localProduct = await _searchLocalProduct(barcode);
      if (localProduct != null) {
        debugPrint('‚úÖ [SEARCH] Produit trouv√© en local: ${localProduct.name}');
        
        // Marquer comme scann√©
        if (localProduct.id != null) {
          await _database.markProductAsScanned(localProduct.id!);
        }
        
        return ProductSearchResponse(
          result: ProductSearchResult.found,
          productDto: localProduct,
        );
      }

      debugPrint('‚ÑπÔ∏è [SEARCH] Produit non trouv√© en local, recherche sur serveur...');

      // ‚úÖ √âtape 2 : Recherche sur le serveur
      final serverProduct = await _searchServerProduct(barcode);
      if (serverProduct != null) {
        debugPrint('‚úÖ [SEARCH] Produit trouv√© sur serveur: ${serverProduct['name']}');
        
        // ‚úÖ √âtape 3 : Sauvegarder en local
        final localId = await _saveProductFromServer(serverProduct);
        if (localId != null && localId > 0) {
          // Marquer comme scann√©
          await _database.markProductAsScanned(localId);
          
          debugPrint('‚úÖ [SEARCH] Produit synchronis√© avec ID: $localId');
          
          // ‚úÖ OPTION A : R√©cup√©rer depuis la base (avec les vrais IDs)
          final savedProduct = await _database.getProductById(localId);
          if (savedProduct != null) {
            return ProductSearchResponse(
              result: ProductSearchResult.found,
              productDto: savedProduct.toDto(),
            );
          }
          
          // ‚úÖ OPTION B : Fallback avec conversion directe du serveur
          debugPrint('‚ö†Ô∏è [SEARCH] Impossible de r√©cup√©rer le produit sauv√©, utilisation conversion serveur');
          final serverDto = _convertServerProductToDto(serverProduct);
          // Mettre √† jour l'ID local
          final updatedDto = ProductDto(
            id: localId, // ‚úÖ UTILISATION de l'ID local
            barcode: serverDto.barcode,
            name: serverDto.name,
            description: serverDto.description,
            brandId: serverDto.brandId,
            categoryId: serverDto.categoryId,
            imageFileName: serverDto.imageFileName,
            imageUrl: serverDto.imageUrl,
            localImagePath: serverDto.localImagePath,
            isActive: serverDto.isActive,
            createdAt: serverDto.createdAt,
            updatedAt: serverDto.updatedAt,
          );
          
          return ProductSearchResponse(
            result: ProductSearchResult.found,
            productDto: updatedDto,
          );
        }
      }

      debugPrint('‚ÑπÔ∏è [SEARCH] Produit non trouv√©');
      return ProductSearchResponse(
        result: ProductSearchResult.notFound,
        errorMessage: 'Produit non trouv√© localement et sur le serveur',
      );

    } catch (e) {
      debugPrint('‚ùå [SEARCH] Erreur: $e');
      return ProductSearchResponse(
        result: ProductSearchResult.invalidBarcode,
        errorMessage: 'Erreur lors de la recherche: $e',
      );
    }
  }

  /// Ajouter un produit depuis un DTO
  Future<int> addProductFromDto(ProductDto dto) async {
    final companion = dto.toInsertCompanion();
    return await _database.insertProduct(companion);
  }

  /// R√©cup√©rer un produit et le convertir en DTO
  Future<ProductDto?> getProductAsDto(int productId) async {
    final product = await _database.getProductById(productId);
    return product?.toDto();
  }

  /// R√©cup√©rer tous les produits en DTOs
  Future<List<ProductDto>> getAllProductsAsDtos() async {
    final products = await _database.getAllProducts();
    return products.map((p) => p.toDto()).toList();
  }

  /// Rechercher des produits
  Future<List<ProductDto>> searchProducts(String query) async {
    final products = await _database.searchProductsByName(query);
    return products.map((p) => p.toDto()).toList();
  }

  /// Ajouter √† la queue de recherche prioritaire
  Future<void> addToPrioritySearchQueue(String barcode) async {
    // TODO: Impl√©menter la queue de recherche
    // Pour l'instant, juste log
    debugPrint('Added $barcode to priority search queue');
  }

  /// Naviguer vers l'enregistrement de produit
  Future<bool?> navigateToProductRegistration(BuildContext context, String barcode) async {
    // TODO: Impl√©menter la navigation vers l'enregistrement
    // Pour l'instant, retourner false
    debugPrint('Navigate to product registration for barcode: $barcode');
    return false;
  }

  // ===========================================
  // ‚úÖ NOUVELLES M√âTHODES √Ä AJOUTER
  // ===========================================

  /// Charger toutes les marques pour les dropdowns
  Future<List<Brand>> loadBrands() async {
    try {
      return await _database.getAllBrands();
    } catch (e) {
      debugPrint('Error loading brands: $e');
      return [];
    }
  }

  /// Charger toutes les cat√©gories pour les dropdowns
  Future<List<Category>> loadCategories() async {
    try {
      return await _database.getAllCategories();
    } catch (e) {
      debugPrint('Error loading categories: $e');
      return [];
    }
  }

  /// Sauvegarder un nouveau produit
  Future<void> saveProduct({
    required String barcode,
    required String name,
    int? brandId,
    int? categoryId,
    String? description,
    String? imageUrl,
  }) async {
    try {
      // Validation du code-barres
      final barcodeInt = int.tryParse(barcode);
      if (barcodeInt == null || barcodeInt <= 0) {
        throw Exception('Invalid barcode format: $barcode');
      }

      // V√©rifier si le produit existe d√©j√†
      final existing = await _database.getProductByBarcode(barcode);
      if (existing != null) {
        throw Exception('Product with barcode $barcode already exists');
      }

      // Cr√©er le DTO
      final productDto = ProductDto(
        barcode: barcodeInt,
        name: name,
        description: description,
        brandId: brandId,
        categoryId: categoryId,
        imageUrl: imageUrl,
        localImagePath: imageUrl, // Si c'est un chemin local
        isActive: true,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      // Sauvegarder via le mapper
      final productId = await _database.insertProduct(productDto.toInsertCompanion());
      
      debugPrint('Product saved with ID: $productId');
      
    } catch (e) {
      debugPrint('Error saving product: $e');
      rethrow;
    }
  }

  /// Navigation vers capture photo
  Future<String?> navigateToCameraCapture(BuildContext context, String barcode) async {
    try {
      // TODO: Impl√©menter la navigation vers la capture photo
      debugPrint('Navigate to camera capture for barcode: $barcode');
      
      // Simulation d'un d√©lai de capture
      await Future.delayed(const Duration(seconds: 1));
      
      // Retourner un chemin fictif pour le test
      return '/storage/emulated/0/Pictures/${barcode}_${DateTime.now().millisecondsSinceEpoch}.jpg';
      
    } catch (e) {
      debugPrint('Error capturing photo: $e');
      return null;
    }
  }

  // ===========================================
  // ‚úÖ M√âTHODE MANQUANTE √Ä AJOUTER
  // ===========================================

  /// Supprimer un produit et toutes ses donn√©es associ√©es de mani√®re robuste
  Future<bool> deleteProductWithImage(Product product) async {
    debugPrint('üóëÔ∏è Starting deletion of product: ${product.name} (ID: ${product.id})');
    
    bool hasErrors = false;
    final List<String> errorMessages = [];

    try {
      // ========================================
      // PHASE 1: Supprimer l'historique des prix
      // ========================================
      debugPrint('üìä Deleting price history for product ${product.id}...');
      try {
        final deletedPriceCount = await (_database.delete(_database.priceHistory)
          ..where((p) => p.productId.equals(product.id)))
          .go();
        
        debugPrint('‚úÖ Deleted $deletedPriceCount price history entries');
      } catch (e) {
        hasErrors = true;
        final errorMsg = 'Failed to delete price history: $e';
        errorMessages.add(errorMsg);
        debugPrint('‚ùå $errorMsg');
      }

      // ========================================
      // PHASE 2: Supprimer les fichiers images
      // ========================================
      if (product.localImagePath != null && product.localImagePath!.isNotEmpty) {
        debugPrint('üñºÔ∏è Deleting local image: ${product.localImagePath}');
        try {
          await _deleteLocalImageFile(product.localImagePath!);
          debugPrint('‚úÖ Local image deleted successfully');
        } catch (e) {
          hasErrors = true;
          final errorMsg = 'Failed to delete local image: $e';
          errorMessages.add(errorMsg);
          debugPrint('‚ö†Ô∏è $errorMsg');
          // Continue m√™me si l'image ne peut pas √™tre supprim√©e
        }
      }

      // ========================================
      // PHASE 3: Supprimer les alertes de prix (si applicable)
      // ========================================
      debugPrint('üîî Cleaning up price alerts for product ${product.id}...');
      try {
        await _deleteProductPriceAlerts(product.id);
        debugPrint('‚úÖ Price alerts cleaned up');
      } catch (e) {
        hasErrors = true;
        final errorMsg = 'Failed to delete price alerts: $e';
        errorMessages.add(errorMsg);
        debugPrint('‚ö†Ô∏è $errorMsg');
      }

      // ========================================
      // PHASE 4: Supprimer les r√©f√©rences dans d'autres tables
      // ========================================
      debugPrint('üîó Cleaning up related data...');
      try {
        await _cleanupProductReferences(product.id);
        debugPrint('‚úÖ Related data cleaned up');
      } catch (e) {
        hasErrors = true;
        final errorMsg = 'Failed to cleanup references: $e';
        errorMessages.add(errorMsg);
        debugPrint('‚ö†Ô∏è $errorMsg');
      }

      // ========================================
      // PHASE 5: Supprimer le produit principal
      // ========================================
      debugPrint('üéØ Deleting main product record...');
      final productDeleted = await _database.deleteProduct(product.id);
      
      if (productDeleted) {
        debugPrint('‚úÖ Product ${product.name} (ID: ${product.id}) deleted successfully');
        
        // Log du r√©sum√©
        if (hasErrors) {
          debugPrint('‚ö†Ô∏è Product deleted with ${errorMessages.length} warning(s):');
          for (final error in errorMessages) {
            debugPrint('   - $error');
          }
        }
        
        return true;
      } else {
        debugPrint('‚ùå Failed to delete main product record');
        return false;
      }

    } catch (e, stackTrace) {
      debugPrint('‚ùå Critical error during product deletion: $e');
      if (kDebugMode) {
        debugPrint('Stack trace: $stackTrace');
      }
      return false;
    }
  }

  /// Supprimer le fichier image local de mani√®re robuste
  Future<void> _deleteLocalImageFile(String imagePath) async {
    try {
      final file = File(imagePath);
      
      // V√©rifier que le fichier existe
      if (await file.exists()) {
        // V√©rifier les permissions avant de supprimer
        final stat = await file.stat();
        if (stat.type == FileSystemEntityType.file) {
          await file.delete();
          debugPrint('üñºÔ∏è Successfully deleted image file: $imagePath');
        } else {
          throw Exception('Path is not a file: $imagePath');
        }
      } else {
        debugPrint('üñºÔ∏è Image file does not exist (already deleted?): $imagePath');
      }
      
    } catch (e) {
      // Re-throw pour que l'appelant puisse g√©rer l'erreur
      throw Exception('Error deleting image file "$imagePath": $e');
    }
  }

  /// Supprimer les alertes de prix pour un produit
  Future<void> _deleteProductPriceAlerts(int productId) async {
    try {
      // TODO: Impl√©menter quand vous aurez une table price_alerts
      // await (_database.delete(_database.priceAlerts)
      //   ..where((a) => a.productId.equals(productId)))
      //   .go();
      
      debugPrint('üîî Price alerts cleanup completed (no alerts table yet)');
    } catch (e) {
      throw Exception('Error deleting price alerts: $e');
    }
  }

  /// Nettoyer les r√©f√©rences dans d'autres tables
  Future<void> _cleanupProductReferences(int productId) async {
    try {
      // TODO: Ajouter d'autres nettoyages selon votre sch√©ma :
      
      // 1. Supprimer les favoris (si vous avez une table favorites)
      // await (_database.delete(_database.favorites)
      //   ..where((f) => f.productId.equals(productId)))
      //   .go();
      
      // 2. Supprimer les notes/reviews (si vous avez une table reviews)
      // await (_database.delete(_database.reviews)
      //   ..where((r) => r.productId.equals(productId)))
      //   .go();
      
      // 3. Supprimer les entr√©es de shopping list (si applicable)
      // await (_database.delete(_database.shoppingListItems)
      //   ..where((s) => s.productId.equals(productId)))
      //   .go();
      
      debugPrint('üîó Product references cleanup completed');
    } catch (e) {
      throw Exception('Error cleaning up product references: $e');
    }
  }

  /// Version simplifi√©e pour les DTOs
  Future<bool> deleteProductDto(ProductDto productDto) async {
    if (productDto.id == null) {
      debugPrint('‚ùå Cannot delete product: no ID provided in DTO');
      return false;
    }

    try {
      // R√©cup√©rer le Product Drift complet pour avoir toutes les infos
      final product = await _database.getProductById(productDto.id!);
      if (product == null) {
        debugPrint('‚ùå Product not found for deletion: ${productDto.id}');
        return false;
      }

      // Utiliser la m√©thode robuste compl√®te
      return await deleteProductWithImage(product);
    } catch (e) {
      debugPrint('‚ùå Error deleting product DTO: $e');
      return false;
    }
  }

  /// Version simple pour suppression par ID seulement
  Future<bool> deleteProduct(int productId) async {
    try {
      final product = await _database.getProductById(productId);
      if (product == null) {
        debugPrint('‚ùå Product not found for deletion: $productId');
        return false;
      }

      return await deleteProductWithImage(product);
    } catch (e) {
      debugPrint('‚ùå Error deleting product by ID: $e');
      return false;
    }
  }

  /// Validation avant suppression (m√©thode utilitaire)
  Future<bool> canDeleteProduct(int productId) async {
    try {
      final product = await _database.getProductById(productId);
      if (product == null) return false;

      // Ajouter ici des r√®gles m√©tier si n√©cessaire :
      // - V√©rifier si le produit n'est pas dans un panier actif
      // - V√©rifier les permissions utilisateur
      // - etc.

      return true;
    } catch (e) {
      debugPrint('‚ùå Error checking if product can be deleted: $e');
      return false;
    }
  }

  /// Statistiques de suppression (pour les logs)
  Future<Map<String, int>> getProductDeletionStats(int productId) async {
    final stats = <String, int>{};
    
    try {
      // Compter les donn√©es associ√©es avant suppression
      final priceHistoryCount = await (_database.select(_database.priceHistory)
        ..where((p) => p.productId.equals(productId)))
        .get();
      
      stats['priceHistoryEntries'] = priceHistoryCount.length;
      
      // TODO: Ajouter d'autres compteurs selon vos tables
      // final alertsCount = await (_database.select(_database.priceAlerts)
      //   ..where((a) => a.productId.equals(productId)))
      //   .get();
      // stats['priceAlerts'] = alertsCount.length;
      
      return stats;
    } catch (e) {
      debugPrint('‚ùå Error getting deletion stats: $e');
      return {};
    }
  }
  
  /// Recherche locale d'un produit par code-barres
  Future<ProductDto?> _searchLocalProduct(String barcode) async {
    try {
      // Validation du code-barres
      final barcodeInt = int.tryParse(barcode);
      if (barcodeInt == null || barcodeInt <= 0) {
        return null;
      }

      // Recherche en base locale
      final localProduct = await _database.getProductByBarcode(barcode);
      return localProduct?.toDto();
      
    } catch (e) {
      debugPrint('Error searching local product: $e');
      return null;
    }
  }

  /// ‚úÖ NOUVEAU : Recherche sur le serveur
  Future<Map<String, dynamic>?> _searchServerProduct(String barcode) async {
    try {
      debugPrint('üåê [SERVER] Recherche produit sur serveur...');
      
      final product = await _serverService.getProductByBarcode(barcode);
      
      if (product != null) {
        debugPrint('‚úÖ [SERVER] Produit trouv√©: ${product['name']}');
        return product;
      } else {
        debugPrint('‚ÑπÔ∏è [SERVER] Produit non trouv√© sur serveur');
        return null;
      }
    } catch (e) {
      debugPrint('‚ùå [SERVER] Erreur recherche serveur: $e');
      return null;
    }
  }

  /// ‚úÖ CORRECTION : Sauvegarder un produit venant du serveur
  Future<int?> _saveProductFromServer(Map<String, dynamic> serverProduct) async {
    try {
      debugPrint('üíæ [SYNC] Sauvegarde produit du serveur...');
      
      // V√©rifier/cr√©er les d√©pendances (marque, cat√©gorie)
      final brandId = await _ensureBrandExists(serverProduct);
      final categoryId = await _ensureCategoryExists(serverProduct);
      
      // ‚úÖ CORRECTION : Cr√©er le ProductsCompanion avec les champs qui existent
      final productCompanion = ProductsCompanion(
        barcode: Value(int.tryParse(serverProduct['barcode'].toString()) ?? 0),
        name: Value(serverProduct['name'] as String),
        description: Value(serverProduct['description'] as String?),
        brandId: Value(brandId),
        categoryId: Value(categoryId),
        imageUrl: Value(serverProduct['imageUrl'] as String?),
        isActive: const Value(true),
        scanCount: const Value(1),
        lastScannedAt: Value(DateTime.now()),
        createdAt: Value(DateTime.now()),
        updatedAt: Value(DateTime.now()),
      );
      
      final productId = await _database.insertProduct(productCompanion);
      debugPrint('‚úÖ [SYNC] Produit sauv√© avec ID: $productId');
      
      return productId;
    } catch (e) {
      debugPrint('‚ùå [SYNC] Erreur sauvegarde: $e');
      return null;
    }
  }

  /// ‚úÖ NOUVEAU : S'assurer que la marque existe
  Future<int?> _ensureBrandExists(Map<String, dynamic> serverProduct) async {
    try {
      final brandName = serverProduct['brand']?['name'] as String?;
      if (brandName == null) return null;
      
      // Chercher la marque existante
      final existingBrands = await _database.getAllBrands();
      final existingBrand = existingBrands.where((b) => b.name == brandName).firstOrNull;
      
      if (existingBrand != null) {
        return existingBrand.id;
      }
      
      // Cr√©er la nouvelle marque
      final brandCompanion = BrandsCompanion(
        name: Value(brandName),
        isActive: const Value(true),
        createdAt: Value(DateTime.now()),
        updatedAt: Value(DateTime.now()),
      );
      
      final brandId = await _database.insertBrand(brandCompanion);
      debugPrint('‚úÖ [SYNC] Nouvelle marque cr√©√©e: $brandName (ID: $brandId)');
      
      return brandId;
    } catch (e) {
      debugPrint('‚ùå [SYNC] Erreur cr√©ation marque: $e');
      return null;
    }
  }

  /// ‚úÖ NOUVEAU : S'assurer que la cat√©gorie existe
  Future<int?> _ensureCategoryExists(Map<String, dynamic> serverProduct) async {
    try {
      final categoryName = serverProduct['category']?['name'] as String?;
      if (categoryName == null) return null;
      
      // Chercher la cat√©gorie existante
      final existingCategories = await _database.getAllCategories();
      final existingCategory = existingCategories.where((c) => c.name == categoryName).firstOrNull;
      
      if (existingCategory != null) {
        return existingCategory.id;
      }
      
      // Cr√©er la nouvelle cat√©gorie
      final categoryCompanion = CategoriesCompanion(
        name: Value(categoryName),
        isActive: const Value(true),
        createdAt: Value(DateTime.now()),
        updatedAt: Value(DateTime.now()),
      );
      
      final categoryId = await _database.insertCategory(categoryCompanion);
      debugPrint('‚úÖ [SYNC] Nouvelle cat√©gorie cr√©√©e: $categoryName (ID: $categoryId)');
      
      return categoryId;
    } catch (e) {
      debugPrint('‚ùå [SYNC] Erreur cr√©ation cat√©gorie: $e');
      return null;
    }
  }

  /// ‚úÖ AM√âLIORATION : Convertir produit serveur en DTO avec gestion d'erreurs
  ProductDto _convertServerProductToDto(Map<String, dynamic> serverProduct) {
    try {
      return ProductDto(
        // ‚úÖ Param√®tres obligatoires avec validation
        barcode: int.tryParse(serverProduct['barcode']?.toString() ?? '') ?? 0,
        name: serverProduct['name']?.toString() ?? 'Produit sans nom',
        
        // ‚úÖ Param√®tres optionnels (selon votre ProductDto)
        id: serverProduct['id'] as int?, // ID du serveur si disponible
        brandId: serverProduct['brandId'] as int?, // Si le serveur renvoie l'ID
        categoryId: serverProduct['categoryId'] as int?, // Si le serveur renvoie l'ID
        description: serverProduct['description']?.toString(),
        
        // ‚úÖ Images (selon votre ProductDto)
        imageFileName: serverProduct['imageFileName']?.toString(),
        imageUrl: serverProduct['imageUrl']?.toString(),
        localImagePath: null, // Pas encore t√©l√©charg√©e localement
        
        // ‚úÖ M√©tadonn√©es
        isActive: serverProduct['isActive'] as bool? ?? true,
        createdAt: serverProduct['createdAt'] != null 
          ? DateTime.tryParse(serverProduct['createdAt'].toString()) ?? DateTime.now()
          : DateTime.now(),
        updatedAt: serverProduct['updatedAt'] != null 
          ? DateTime.tryParse(serverProduct['updatedAt'].toString()) ?? DateTime.now()
          : DateTime.now(),
      );
    } catch (e) {
      debugPrint('‚ùå [CONVERT] Erreur conversion serveur vers DTO: $e');
      // Retourner un DTO minimal en cas d'erreur
      return ProductDto(
        barcode: int.tryParse(serverProduct['barcode']?.toString() ?? '') ?? 0,
        name: serverProduct['name']?.toString() ?? 'Produit inconnu',
        description: 'Erreur lors de la conversion des donn√©es serveur',
        isActive: false, // Marquer comme inactif en cas d'erreur
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
    }
  }
}